/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();

app.use(bodyParser.json());

const filePath = "./todos.json"
let todos;
fs.readFile(filePath, "utf8", function (err, data) {
  if (err) throw err;
  if (data) {
    // console.log("DATA NOT NULL: ", data);
    todos = JSON.parse(data);
  } else {
    // console.log("DATA NULL: ", data);
    todos = [];
  }
  // todos = JSON.parse(data)
});
function saveTodo() {
  fs.writeFile(filePath, JSON.stringify(todos), function (err) {
    if (err) throw err;
    // console.log("TODOS SAVED SUCCESSFULLY");
  });
}
function getIndex(id) {
  for (let index = 0; index < todos.length; index++) {
    if (todos[index].id == id) {
      return index;
    }
  }
  return -1
}
app.get('/todos', (req, res) => {
  return res.status(200).json(todos);
});
app.get('/todos/:id', (req, res) => {
  const index = getIndex(parseInt(req.params.id));
  // console.log("INDEX::::", index, "\n ID::::", parseInt(req.params.id));
  if (index == -1) return res.status(404).json({ "code": "404", "message": "Todo not found" })
  return res.status(200).json(todos[index]);
});

app.post('/todos', async (req, res) => {
  const newTodo = {
    "id": Math.floor(Math.random() * 1000000),
    "title": req.body.title,
    "description": req.body.description,
    "completed": false,
  }
  // console.log("NEW TODO: ",req.body);
  try {
    // console.log("PREVIOUS TODO LIST: ", todos);
    todos.push(newTodo);
    // console.log("UPDATED TODO LIST: ", todos);
    saveTodo();
    return res.status(201).json({ "id": newTodo.id })
  } catch (error) {
    return res.status(500).json({ "error": "SOMETHING WENT WRONG." })
  }
});


app.put('/todos/:id', (req, res) => {
  const updateTodo = {
    "id": req.params.id,
    "title": req.body.title,
    "description": req.body.description,
    "completed": req.body.completed,
  }
  const index = getIndex(req.params.id);
  // console.log("INDEX:  ", index);
  if (index === -1) return res.status(404).json({ "code": "404", "message": "Todo not found" })
  // console.log("BEFORE UPDATE: ", todos[index]);
  todos[index] = updateTodo;
  // console.log("After UPDATE: ", todos[index]);
  saveTodo()
  return res.status(200).json({ "message": "Todo updated successfully" })
});

app.delete('/todos/:id', (req, res) => {

  const index = getIndex(req.params.id)
  if (index === -1) return res.status(404).json({ "message": "Todo is not present" })
  todos.splice(index, 1)
  saveTodo();
  res.status(200).json({ "message": "TODO DELETED" });
})
// app.listen(3000)
// console.log("SERVER STARTED ON http://localhost/3000/todos")

module.exports = app;